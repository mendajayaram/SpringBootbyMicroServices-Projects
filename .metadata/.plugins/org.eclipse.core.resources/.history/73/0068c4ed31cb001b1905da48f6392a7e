package com.nt.jai.service;

import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.nt.jai.model.User;
import com.nt.jai.repo.UserRepository;

@Service
public class UserServiceImpl implements IUserService, UserDetailsService {
	@Autowired
	private UserRepository repo;

	@Autowired
	private BCryptPasswordEncoder encoder;

	@Override
	public Integer saveUser(User user) {
		String pwd = user.getUserPwd();
		String encode = encoder.encode(pwd);
		user.setUserPwd(encode);
		user = repo.save(user);

		return user.getId();
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Optional<User> opt = repo.findByUserName(username);
		if (opt.isPresent()) {
			throw new UsernameNotFoundException("Username not exist!");
		} else {
			User user = opt.get();

			return new org.springframework.security.core.userdetails.User(username, user.getUserPwd(), user
					.getUserRoles().stream().map(role -> new SimpleGrantedAuthority(role)).collect(Collectors.toSet()));
		}
	}
}
